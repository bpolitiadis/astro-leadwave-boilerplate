---
export interface Props {
  variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link'
  size?: 'default' | 'sm' | 'lg' | 'icon'
  class?: string
  disabled?: boolean
  type?: 'button' | 'submit' | 'reset'
  as?: 'button' | 'a'
  href?: string
  [key: string]: any
}

type ButtonVariant = NonNullable<Props['variant']>
type ButtonSize = NonNullable<Props['size']>

const {
  variant = 'default',
  size = 'default',
  class: className = '',
  disabled = false,
  type = 'button',
  as = 'button',
  href,
  ...rest
} = Astro.props

const baseClasses = 'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50'

const variants: Record<ButtonVariant, string> = {
  default: 'bg-primary text-primary-foreground hover:bg-primary/90',
  destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
  outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
  secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
  ghost: 'hover:bg-accent hover:text-accent-foreground',
  link: 'text-primary underline-offset-4 hover:underline'
}

const sizes: Record<ButtonSize, string> = {
  default: 'h-10 px-4 py-2',
  sm: 'h-9 rounded-md px-3',
  lg: 'h-11 rounded-md px-8',
  icon: 'h-10 w-10'
}

const classes = `${baseClasses} ${variants[variant as ButtonVariant]} ${sizes[size as ButtonSize]} ${className}`
---

{as === 'a' ? (
  <a
    href={href}
    class={classes}
    {...rest}
  >
    <slot />
  </a>
) : (
  <button
    type={type}
    class={classes}
    disabled={disabled}
    {...rest}
  >
    <slot />
  </button>
)}
