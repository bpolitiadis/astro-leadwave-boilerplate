---
import { generatePersonSchema } from '../../lib/schema';

export interface Props {
  name: string;
  role: string;
  bio: string;
  photo?: string;
  credentials?: string[];
  email?: string;
  phone?: string;
  social?: {
    linkedin?: string;
    twitter?: string;
    facebook?: string;
  };
  specialties?: string[];
}

const {
  name,
  role,
  bio,
  photo,
  credentials = [],
  email,
  phone,
  social = {},
  specialties = [],
} = Astro.props;

// Generate schema for this team member
const personSchema = generatePersonSchema(name, role, bio, photo, credentials);
---

<div class="team-member bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-lg transition-all duration-300 group" data-testid="team-member">
  <!-- Photo -->
  <div class="relative h-64 bg-gray-100 overflow-hidden">
    {photo ? (
      <img
        src={photo}
        alt={`${name} - ${role}`}
        class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
        loading="lazy"
      />
    ) : (
      <div class="w-full h-full flex items-center justify-center bg-gradient-to-br from-primary-50 to-primary-100">
        <svg class="w-16 h-16 text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
        </svg>
      </div>
    )}
    
    <!-- Social Links Overlay -->
    {Object.keys(social).length > 0 && (
      <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all duration-300 flex items-center justify-center">
        <div class="opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex space-x-3">
          {social.linkedin && (
            <a
              href={social.linkedin}
              target="_blank"
              rel="noopener noreferrer"
              class="w-10 h-10 bg-white rounded-full flex items-center justify-center hover:bg-primary-600 hover:text-white transition-colors duration-200"
              aria-label={`${name} LinkedIn profile`}
            >
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
              </svg>
            </a>
          )}
          {social.twitter && (
            <a
              href={social.twitter}
              target="_blank"
              rel="noopener noreferrer"
              class="w-10 h-10 bg-white rounded-full flex items-center justify-center hover:bg-primary-600 hover:text-white transition-colors duration-200"
              aria-label={`${name} Twitter profile`}
            >
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
              </svg>
            </a>
          )}
          {social.facebook && (
            <a
              href={social.facebook}
              target="_blank"
              rel="noopener noreferrer"
              class="w-10 h-10 bg-white rounded-full flex items-center justify-center hover:bg-primary-600 hover:text-white transition-colors duration-200"
              aria-label={`${name} Facebook profile`}
            >
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
              </svg>
            </a>
          )}
        </div>
      </div>
    )}
  </div>
  
  <!-- Content -->
  <div class="p-6">
    <!-- Name and Role -->
    <div class="text-center mb-4">
      <h3 class="text-xl font-semibold text-gray-900 mb-1" data-testid="team-member-name">
        {name}
      </h3>
      <p class="text-primary-600 font-medium" data-testid="team-member-role">
        {role}
      </p>
    </div>
    
    <!-- Credentials -->
    {credentials.length > 0 && (
      <div class="flex flex-wrap justify-center gap-2 mb-4">
        {credentials.map((credential) => (
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-100 text-primary-800">
            {credential}
          </span>
        ))}
      </div>
    )}
    
    <!-- Bio -->
    <p class="text-gray-600 text-sm leading-relaxed mb-4" data-testid="team-member-bio">
      {bio}
    </p>
    
    <!-- Specialties -->
    {specialties.length > 0 && (
      <div class="mb-4">
        <h4 class="text-sm font-medium text-gray-900 mb-2">Specialties:</h4>
        <div class="flex flex-wrap gap-1">
          {specialties.map((specialty) => (
            <span class="inline-flex items-center px-2 py-1 rounded text-xs bg-gray-100 text-gray-700">
              {specialty}
            </span>
          ))}
        </div>
      </div>
    )}
    
    <!-- Contact Info -->
    <div class="flex flex-col space-y-2">
      {email && (
        <a
          href={`mailto:${email}`}
          class="flex items-center text-sm text-gray-600 hover:text-primary-600 transition-colors duration-200"
          data-testid="team-member-email"
        >
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
          </svg>
          {email}
        </a>
      )}
      {phone && (
        <a
          href={`tel:${phone}`}
          class="flex items-center text-sm text-gray-600 hover:text-primary-600 transition-colors duration-200"
          data-testid="team-member-phone"
        >
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
          </svg>
          {phone}
        </a>
      )}
    </div>
  </div>
</div>

<!-- Structured Data -->
<script is:inline type="application/ld+json" set:html={JSON.stringify(personSchema)}></script>

<script is:inline define:vars={{ name, role, photo, credentials, specialties }}>
  import { logComponentLifecycle } from '../../lib/logger';

  // Log component lifecycle
  logComponentLifecycle('TeamMember', 'interactive', {
    name,
    role,
    hasPhoto: !!photo,
    credentialsCount: credentials?.length || 0,
    specialtiesCount: specialties?.length || 0,
  });

  // Track social link clicks
  document.querySelectorAll('[aria-label*="profile"]').forEach((link) => {
    link.addEventListener('click', (e) => {
      const target = e.target;
      const platform = target.getAttribute('aria-label')?.split(' ')[1] || 'unknown';
      logComponentLifecycle('TeamMember', 'social_link_clicked', {
        name,
        platform,
        url: target.href,
      });
    });
  });

  // Track contact link clicks
  document.querySelectorAll('[data-testid*="team-member-"]').forEach((link) => {
    link.addEventListener('click', (e) => {
      const target = e.target;
      const type = target.getAttribute('data-testid')?.replace('team-member-', '') || 'unknown';
      logComponentLifecycle('TeamMember', 'contact_clicked', {
        name,
        type,
        value: target.textContent?.trim(),
      });
    });
  });
</script>
