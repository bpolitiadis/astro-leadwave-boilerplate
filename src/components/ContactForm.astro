---
import { logComponentLifecycle } from '../lib/logger';
import { Button, Input, Textarea, Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from './ui';

// Log component lifecycle
logComponentLifecycle('ContactForm', 'render', {
  pathname: Astro.url.pathname,
});

export interface Props {
  title?: string;
  description?: string;
}

const {
  title = 'Contact Us',
  description = 'Get in touch with us for any questions or support.',
} = Astro.props;
---

<Card class="max-w-4xl mx-auto">
  <CardHeader class="text-center">
    <CardTitle class="text-3xl">{title}</CardTitle>
    <CardDescription class="text-lg max-w-2xl mx-auto">{description}</CardDescription>
  </CardHeader>

  <CardContent>
    <form id='contact-form' class='space-y-6' enctype='multipart/form-data' novalidate data-testid='contact-form'>
    <!-- Personal Information -->
    <div class='grid grid-cols-1 md:grid-cols-2 gap-6'>
      <div class='space-y-2'>
        <label for='name' class='block text-sm font-medium text-gray-700 flex items-center'>
          <span class='text-red-500 mr-1'>*</span>
          Full Name
        </label>
        <Input
          type='text'
          name='name'
          id='name'
          data-testid='contact-form-name'
          required
          placeholder='Enter your full name'
          aria-describedby='name-error'
          aria-invalid='false'
        />
        <div id='name-error' class='mt-1 text-sm text-red-600 hidden' role='alert' data-testid='contact-form-name-error'></div>
      </div>

      <div class='space-y-2'>
        <label for='email' class='block text-sm font-medium text-gray-700 flex items-center'>
          <span class='text-red-500 mr-1'>*</span>
          Email Address
        </label>
        <Input
          type='email'
          name='email'
          id='email'
          data-testid='contact-form-email'
          required
          placeholder='your.email@example.com'
          aria-describedby='email-error'
          aria-invalid='false'
        />
        <div id='email-error' class='mt-1 text-sm text-red-600 hidden' role='alert' data-testid='contact-form-email-error'></div>
      </div>
    </div>

    <div class='grid grid-cols-1 md:grid-cols-2 gap-6'>
      <div class='space-y-2'>
        <label for='phone' class='block text-sm font-medium text-gray-700'>
          Phone Number
        </label>
        <Input
          type='tel'
          name='phone'
          id='phone'
          data-testid='contact-form-phone'
          placeholder='+1 (555) 123-4567'
          aria-describedby='phone-error'
          aria-invalid='false'
        />
        <div id='phone-error' class='mt-1 text-sm text-red-600 hidden' role='alert' data-testid='contact-form-phone-error'></div>
      </div>

      <div class='space-y-2'>
        <label for='company' class='block text-sm font-medium text-gray-700'>
          Company
        </label>
        <Input
          type='text'
          name='company'
          id='company'
          data-testid='contact-form-company'
          placeholder='Your company name'
        />
      </div>
    </div>

    <!-- Subject and Priority -->
    <div class='grid grid-cols-1 md:grid-cols-2 gap-6'>
      <div class='space-y-2'>
        <label for='subject' class='block text-sm font-medium text-gray-700 flex items-center'>
          <span class='text-red-500 mr-1'>*</span>
          Subject
        </label>
        <select name='subject' id='subject' data-testid='contact-form-subject' required class='block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm' aria-describedby='subject-error' aria-invalid='false'>
          <option value=''>Please select a subject</option>
          <option value='general'>General Inquiry</option>
          <option value='support'>Technical Support</option>
          <option value='partnership'>Partnership Opportunity</option>
          <option value='feedback'>Feedback & Suggestions</option>
          <option value='sales'>Sales Inquiry</option>
          <option value='other'>Other</option>
        </select>
        <div id='subject-error' class='mt-1 text-sm text-red-600 hidden' role='alert' data-testid='contact-form-subject-error'></div>
      </div>

      <div class='space-y-2'>
        <label class='block text-sm font-medium text-gray-700'>Priority Level</label>
        <div class='flex flex-wrap gap-4' data-testid='contact-form-priority'>
          <label class='flex items-center'>
            <input type='radio' name='priority' value='low' data-testid='contact-form-priority-low' class='w-4 h-4 text-primary-600 border-gray-300 focus:ring-primary-500' />
            <span class='ml-2 text-sm text-gray-700'>Low</span>
          </label>
          <label class='flex items-center'>
            <input type='radio' name='priority' value='medium' data-testid='contact-form-priority-medium' checked class='w-4 h-4 text-primary-600 border-gray-300 focus:ring-primary-500' />
            <span class='ml-2 text-sm text-gray-700'>Medium</span>
          </label>
          <label class='flex items-center'>
            <input type='radio' name='priority' value='high' data-testid='contact-form-priority-high' class='w-4 h-4 text-primary-600 border-gray-300 focus:ring-primary-500' />
            <span class='ml-2 text-sm text-gray-700'>High</span>
          </label>
        </div>
      </div>
    </div>

    <!-- Message -->
    <div class='space-y-2'>
      <label for='message' class='block text-sm font-medium text-gray-700 flex items-center'>
        <span class='text-red-500 mr-1'>*</span>
        Message
      </label>
      <Textarea
        name='message'
        id='message'
        data-testid='contact-form-message'
        rows={6}
        required
        placeholder='Please provide details about your inquiry...'
        aria-describedby='message-error char-count'
        aria-invalid='false'
      />
      <div class='flex justify-between text-sm text-gray-500'>
        <span>Minimum 10 characters</span>
        <span id='char-count' data-testid='contact-form-char-count'>0 characters</span>
      </div>
      <div id='message-error' class='mt-1 text-sm text-red-600 hidden' role='alert' data-testid='contact-form-message-error'></div>
    </div>

    <!-- File Upload -->
    <div class='space-y-2'>
              <label for='attachment' class='block text-sm font-medium text-gray-700'>
          Attachments (optional)
        </label>
      <div class='border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-primary-400 transition-colors' data-testid='contact-form-file-upload'>
        <svg class='mx-auto h-12 w-12 text-gray-400' stroke='currentColor' fill='none' viewBox='0 0 48 48'>
          <path d='M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' />
        </svg>
        <div class='mt-4'>
          <label for='attachment' class='cursor-pointer'>
            <span class='text-primary-600 hover:text-primary-500 font-medium'>Upload files</span>
            <span class='text-gray-500'> or drag and drop</span>
          </label>
          <input
            type='file'
            name='attachment'
            id='attachment'
            data-testid='contact-form-file'
            multiple
            accept='.pdf,.doc,.docx,.txt,.jpg,.jpeg,.png,.gif,.zip,.rar'
            class='hidden'
            aria-describedby='attachment-error'
          />
        </div>
        <p class='text-xs text-gray-500 mt-2'>
          PDF, DOC, DOCX, TXT, JPG, PNG, GIF, ZIP, RAR up to 10MB each
        </p>
      </div>
      <div id='file-list' class='mt-2 space-y-2' data-testid='contact-form-file-list'></div>
      <div id='attachment-error' class='mt-1 text-sm text-red-600 hidden' role='alert' data-testid='contact-form-file-error'></div>
    </div>

    <!-- Consent -->
    <div class='bg-blue-50 border border-blue-200 rounded-lg p-4' data-testid='contact-form-consent-section'>
      <div class='flex items-start'>
        <div class='flex items-center h-5'>
          <input
            id='consent'
            name='consent'
            type='checkbox'
            data-testid='contact-form-consent'
            required
            class='h-4 w-4 rounded border-gray-300 text-primary-600 focus:ring-primary-500'
            aria-describedby='consent-error'
            aria-invalid='false'
          />
        </div>
        <div class='ml-3 text-sm'>
          <label for='consent' class='text-gray-700'>
            I agree to the <a href='/terms' class='text-primary-600 hover:text-primary-500 underline'>terms and conditions</a> and 
            <a href='/privacy' class='text-primary-600 hover:text-primary-500 underline'> privacy policy</a>
            <span class='text-red-500 ml-1'>*</span>
          </label>
        </div>
      </div>
              <div id='consent-error' class='mt-2 text-sm text-red-600 hidden' role='alert' data-testid='contact-form-consent-error'></div>
    </div>

    <!-- Action Buttons -->
    <CardFooter class='flex flex-col sm:flex-row gap-4 pt-6' data-testid='contact-form-actions'>
      <Button
        type='submit'
        id='submit-btn'
        data-testid='contact-form-submit'
        variant='default'
        size='lg'
        class='flex-1 flex items-center justify-center'
      >
        <svg class='w-5 h-5 mr-2' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
          <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 19l9 2-9-18-9 18 9-2zm0 0v-8' />
        </svg>
        Send Message
      </Button>
      <Button
        type='reset'
        data-testid='contact-form-reset'
        variant='outline'
        size='lg'
        class='flex-1 flex items-center justify-center'
      >
        <svg class='w-5 h-5 mr-2' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
          <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15' />
        </svg>
        Reset Form
      </Button>
    </CardFooter>
  </form>
</CardContent>

  <div id='form-message' class='mt-6 hidden' role='alert' data-testid='contact-form-status'></div>

<script>
  import { logComponentLifecycle } from '../lib/logger';

  // Log when contact form becomes interactive
  logComponentLifecycle('ContactForm', 'interactive', {
    pathname: window.location.pathname,
  });

  const form = document.getElementById('contact-form') as HTMLFormElement;
  const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
  const messageDiv = document.getElementById('form-message') as HTMLDivElement;
  const messageTextarea = document.getElementById('message') as HTMLTextAreaElement;
  const charCount = document.getElementById('char-count') as HTMLSpanElement;
  const fileInput = document.getElementById('attachment') as HTMLInputElement;
  const fileList = document.getElementById('file-list') as HTMLDivElement;

  // Validation functions
  function validateName(name: string): string | null {
    if (!name || name.trim().length < 2) {
      return 'Name must be at least 2 characters long';
    }
    return null;
  }

  function validateEmail(email: string): string | null {
    if (!email) {
      return 'Email is required';
    }
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return 'Please enter a valid email address';
    }
    return null;
  }

  function validatePhone(phone: string): string | null {
    if (!phone) return null; // Optional field
    const phoneRegex = /^[+]?[1-9][\d]{0,15}$/;
    if (!phoneRegex.test(phone.replace(/[\s\-()]/g, ''))) {
      return 'Please enter a valid phone number';
    }
    return null;
  }

  function validateSubject(subject: string): string | null {
    if (!subject || subject === '') {
      return 'Please select a subject';
    }
    return null;
  }

  function validateMessage(message: string): string | null {
    if (!message || message.trim().length < 10) {
      return 'Message must be at least 10 characters long';
    }
    return null;
  }

  function validateConsent(consent: boolean): string | null {
    if (!consent) {
      return 'You must agree to the terms and conditions';
    }
    return null;
  }

  function validateFile(file: File | null): string | null {
    if (!file) return null; // Optional field
    
    const maxSize = 10 * 1024 * 1024; // 10MB
    const allowedTypes = [
      'application/pdf',
      'application/msword',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'text/plain',
      'image/jpeg',
      'image/jpg',
      'image/png',
      'image/gif',
      'application/zip',
      'application/x-rar-compressed'
    ];

    if (file.size > maxSize) {
      return 'File size must be less than 10MB';
    }

    if (!allowedTypes.includes(file.type)) {
      return 'File type not allowed. Please upload PDF, DOC, DOCX, TXT, JPG, PNG, GIF, ZIP, or RAR files';
    }

    return null;
  }

  // Error display functions
  function showError(fieldId: string, message: string) {
    const errorDiv = document.getElementById(`${fieldId}-error`) as HTMLDivElement;
    const field = document.getElementById(fieldId) as HTMLInputElement;
    
    if (errorDiv && field) {
      errorDiv.textContent = message;
      errorDiv.classList.remove('hidden');
      field.setAttribute('aria-invalid', 'true');
      field.classList.add('border-red-500', 'focus:border-red-500', 'focus:ring-red-500');
    }
  }

  function clearError(fieldId: string) {
    const errorDiv = document.getElementById(`${fieldId}-error`) as HTMLDivElement;
    const field = document.getElementById(fieldId) as HTMLInputElement;
    
    if (errorDiv && field) {
      errorDiv.classList.add('hidden');
      field.setAttribute('aria-invalid', 'false');
      field.classList.remove('border-red-500', 'focus:border-red-500', 'focus:ring-red-500');
    }
  }

  function clearAllErrors() {
    const errorDivs = form.querySelectorAll('[id$="-error"]');
    errorDivs.forEach(div => {
      (div as HTMLDivElement).classList.add('hidden');
    });
    
    const fields = form.querySelectorAll('input, textarea, select');
    fields.forEach(field => {
      (field as HTMLInputElement).setAttribute('aria-invalid', 'false');
      (field as HTMLInputElement).classList.remove('border-red-500', 'focus:border-red-500', 'focus:ring-red-500');
    });
  }

  // Character counter for message
  if (messageTextarea && charCount) {
    messageTextarea.addEventListener('input', () => {
      const count = messageTextarea.value.length;
      charCount.textContent = `${count} characters`;
      
      if (count < 10) {
        charCount.classList.add('text-red-500');
        charCount.classList.remove('text-gray-500');
      } else {
        charCount.classList.remove('text-red-500');
        charCount.classList.add('text-gray-500');
      }
    });
  }

  // File upload handling
  if (fileInput && fileList) {
    fileInput.addEventListener('change', () => {
      fileList.innerHTML = '';
      const files = Array.from(fileInput.files || []);
      
      files.forEach((file) => {
        const fileItem = document.createElement('div');
        fileItem.className = 'flex items-center justify-between p-2 bg-white rounded border';
        fileItem.innerHTML = `
          <div class='flex items-center'>
            <svg class='w-4 h-4 text-gray-400 mr-2' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
              <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z' />
            </svg>
            <span class='text-sm text-gray-700'>${file.name}</span>
            <span class='text-xs text-gray-500 ml-2'>(${(file.size / 1024 / 1024).toFixed(2)} MB)</span>
          </div>
          <button type='button' class='text-red-500 hover:text-red-700' onclick='this.parentElement.remove()'>
            <svg class='w-4 h-4' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
              <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M6 18L18 6M6 6l12 12' />
            </svg>
          </button>
        `;
        fileList.appendChild(fileItem);
      });
    });
  }

  // Real-time validation
  const formFields = form.querySelectorAll('input, textarea, select');
  formFields.forEach(field => {
    field.addEventListener('blur', () => {
      const fieldId = (field as HTMLInputElement).id;
      const value = (field as HTMLInputElement).value;
      
      // Clear previous error
      clearError(fieldId);
      
      // Validate based on field type
      if (fieldId === 'name') {
        const error = validateName(value);
        if (error) showError(fieldId, error);
      } else if (fieldId === 'email') {
        const error = validateEmail(value);
        if (error) showError(fieldId, error);
      } else if (fieldId === 'phone') {
        const error = validatePhone(value);
        if (error) showError(fieldId, error);
      } else if (fieldId === 'subject') {
        const error = validateSubject(value);
        if (error) showError(fieldId, error);
      } else if (fieldId === 'message') {
        const error = validateMessage(value);
        if (error) showError(fieldId, error);
      } else if (fieldId === 'consent') {
        const error = validateConsent((field as HTMLInputElement).checked);
        if (error) showError(fieldId, error);
      }
    });

    field.addEventListener('focus', () => {
      logComponentLifecycle('ContactForm', 'field_focus', {
        field: (field as HTMLInputElement).name || (field as HTMLInputElement).id,
      });
    });

    field.addEventListener('blur', () => {
      logComponentLifecycle('ContactForm', 'field_blur', {
        field: (field as HTMLInputElement).name || (field as HTMLInputElement).id,
        hasValue: !!(field as HTMLInputElement).value,
      });
    });
  });

  // Form submission
  form.addEventListener('submit', async e => {
    e.preventDefault();

    logComponentLifecycle('ContactForm', 'form_submit_attempt', {
      hasAttachment: !!(fileInput?.files?.length),
    });

    // Clear all previous errors
    clearAllErrors();

    // Get form data
    const formData = new FormData(form);
    const name = formData.get('name') as string;
    const email = formData.get('email') as string;
    const phone = formData.get('phone') as string;
    const subject = formData.get('subject') as string;
    const message = formData.get('message') as string;
    const consent = formData.get('consent') === 'on';
    const attachment = fileInput?.files?.[0] || null;

    // Validate all fields
    let hasErrors = false;
    
    const nameError = validateName(name);
    if (nameError) {
      showError('name', nameError);
      hasErrors = true;
    }

    const emailError = validateEmail(email);
    if (emailError) {
      showError('email', emailError);
      hasErrors = true;
    }

    const phoneError = validatePhone(phone);
    if (phoneError) {
      showError('phone', phoneError);
      hasErrors = true;
    }

    const subjectError = validateSubject(subject);
    if (subjectError) {
      showError('subject', subjectError);
      hasErrors = true;
    }

    const messageError = validateMessage(message);
    if (messageError) {
      showError('message', messageError);
      hasErrors = true;
    }

    const consentError = validateConsent(consent);
    if (consentError) {
      showError('consent', consentError);
      hasErrors = true;
    }

    if (attachment) {
      const fileError = validateFile(attachment);
      if (fileError) {
        showError('attachment', fileError);
        hasErrors = true;
      }
    }

    if (hasErrors) {
      logComponentLifecycle('ContactForm', 'form_submit_validation_error', {
        errors: ['validation_failed'],
      });
      showMessage('Please fix the errors below and try again.', 'error');
      return;
    }

    submitBtn.disabled = true;
    submitBtn.innerHTML = `
      <svg class='animate-spin -ml-1 mr-3 h-5 w-5 text-white' xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24'>
        <circle class='opacity-25' cx='12' cy='12' r='10' stroke='currentColor' stroke-width='4'></circle>
        <path class='opacity-75' fill='currentColor' d='M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z'></path>
      </svg>
      Sending...
    `;

    try {
      const response = await fetch('/api/contact', {
        method: 'POST',
        body: formData,
      });

      const result = await response.json();

      if (result.success) {
        logComponentLifecycle('ContactForm', 'form_submit_success');
        showMessage("Message sent successfully! We'll get back to you soon.", 'success');
        form.reset();
        if (fileList) fileList.innerHTML = '';
        if (charCount) charCount.textContent = '0 characters';
        clearAllErrors();
      } else {
        logComponentLifecycle('ContactForm', 'form_submit_validation_error', {
          errors: Object.keys(result.errors || {}),
        });
        showMessage('Please fix the errors below and try again.', 'error');
        displayValidationErrors(result.errors);
      }
    } catch (error) {
      logComponentLifecycle('ContactForm', 'form_submit_error', {
        error: error instanceof Error ? error.message : 'Unknown error',
      });
      showMessage('An error occurred. Please try again later.', 'error');
    } finally {
      submitBtn.disabled = false;
      submitBtn.innerHTML = `
        <svg class='w-5 h-5 mr-2' fill='none' stroke='currentColor' viewBox='0 0 24 24'>
          <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 19l9 2-9-18-9 18 9-2zm0 0v-8' />
        </svg>
        Send Message
      `;
    }
  });

  function showMessage(message: string, type: 'success' | 'error') {
    messageDiv.textContent = message;
    messageDiv.className = `mt-6 ${type === 'success' ? 'message-success' : 'message-error'}`;
    messageDiv.classList.remove('hidden');
    
    // Auto-hide success messages after 5 seconds
    if (type === 'success') {
      setTimeout(() => {
        messageDiv.classList.add('hidden');
      }, 5000);
    }
  }

  function displayValidationErrors(errors: Record<string, string>) {
    // Display server-side validation errors
    Object.entries(errors).forEach(([field, message]) => {
      showError(field, message);
    });
  }
</script>
